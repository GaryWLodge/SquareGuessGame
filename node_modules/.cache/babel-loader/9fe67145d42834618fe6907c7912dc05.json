{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Workspace/SquareGuessGame/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray(),\n      correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n      correctChoice: false\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      const cardId = event.target.id;\n      const selectedCard = this.state.isFlipped.slice();\n      console.log(this.state);\n\n      if (selectedCard[cardId] === this.state.correctCard) {\n        selectedCard[cardId] = !selectedCard[cardId];\n        this.setState.correctChoice = true;\n        this.setState.isFlipped = true;\n        console.log(this.state); // if (this.state.clickCount === 2) {\n        //   this.setState({ clickCount: 1 });\n        //   const prevCardId = this.state.prevCardId;\n        //   const newCard = this.state.shuffledCard[cardId];\n        //   const previousCard = this.state.prevSelectedCard;\n        //   console.log(this.state.correctCard)\n        // }\n      }\n    };\n\n    this.isCardCorrect = () => {\n      if (this.state.correctChoice === true) {\n        const displayCorrect = this.state.shuffledCard.slice();\n      } else {\n        const displayWrong = this.state.correctCard.slice();\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        correctCard: App.correctCard().sort(() => Math.random() * 4 + 1),\n        correctChoice: false\n      });\n    };\n\n    this.isGameOver = () => {\n      return this.state.isFlipped.every((element, index, array) => element !== false);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 8\n      }\n    }), this.isGameOver() ? /*#__PURE__*/React.createElement(GameOver, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 8\n      }\n    }, this.state.cardArray.map((correctCard, index) => /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      id: index,\n      correctCard: correctCard,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nApp.cardArray = () => {\n  return [1, 2].reduce((preValue, current) => {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gwl/Workspace/SquareGuessGame/src/App.js"],"names":["React","PureComponent","Header","Card","GameOver","App","state","isFlipped","Array","fill","cardArray","correctCard","Math","floor","random","correctChoice","handleClick","event","preventDefault","cardId","target","id","selectedCard","slice","console","log","setState","isCardCorrect","displayCorrect","shuffledCard","displayWrong","restartGame","sort","isGameOver","every","element","index","array","render","map","reduce","preValue","current","concat"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false\n  };\n\n  static cardArray = () => {\n    return [1,2].reduce((preValue, current) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const selectedCard = this.state.isFlipped.slice();\n    console.log(this.state)\n\n    if (selectedCard[cardId] === this.state.correctCard) {\n      selectedCard[cardId] = !selectedCard[cardId];\n       this.setState.correctChoice = true\n       this.setState.isFlipped = true\n       console.log(this.state)\n\n      // if (this.state.clickCount === 2) {\n      //   this.setState({ clickCount: 1 });\n      //   const prevCardId = this.state.prevCardId;\n      //   const newCard = this.state.shuffledCard[cardId];\n      //   const previousCard = this.state.prevSelectedCard;\n      //   console.log(this.state.correctCard)\n      // }\n    }\n  };\n\n  // isCardMatch = (card1, card2, card1Id, card2Id) => {\n  //   if (card1 === card2) {\n  //     const hideCard = this.state.shuffledCard.slice();\n  //     hideCard[card1Id] = -1;\n  //     hideCard[card2Id] = -1;\n  //     setTimeout(() => {\n  //       this.setState(prevState => ({\n  //         shuffledCard: hideCard\n  //       }))\n  //     }, 1000);\n  //   } else {\n  //     const flipBack = this.state.isFlipped.slice();\n  //     flipBack[card1Id] = false;\n  //     flipBack[card2Id] = false;\n  //     setTimeout(() => {\n  //       this.setState(prevState => ({ isFlipped: flipBack }));\n  //     }, 1000);\n  //   }\n  // };\n\n  isCardCorrect = () => {\n    if (this.state.correctChoice === true) {\n      const displayCorrect = this.state.shuffledCard.slice();\n      \n    } else {\n      const displayWrong = this.state.correctCard.slice();\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n      correctCard: App.correctCard().sort(() => Math.random() * 4 + 1),\n      correctChoice: false\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame} />\n       { this.isGameOver() ? <GameOver restartGame={this.restartGame} /> :\n       <div className=\"grid-container\">\n          {\n            this.state.cardArray.map((correctCard, index) => \n              <Card\n                key={index} \n                id={index} \n                correctCard={correctCard} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n        </div>\n       }\n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}