{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Workspace/SquareGuessGame/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray().sort(),\n      correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n      correctChoice: false,\n      choiceArray: Array(24).fill(false),\n      arrayCount: 0,\n      prePickMode: false\n    };\n\n    this.handleClick = event => {\n      if (this.state.prePickMode === true) {\n        setTimeout(() => {\n          this.setState({\n            correctCard: Math.floor(Math.random() * (3 - 0) + 0)\n          });\n        }, 200);\n      }\n\n      event.preventDefault();\n      const cardId = parseInt(event.target.id);\n      const newFlipps = this.state.isFlipped.slice();\n      const choiceArray = this.state.choiceArray.slice();\n      const arrayCount = this.state.arrayCount;\n\n      if (newFlipps[cardId] === false) {\n        newFlipps[cardId] = !newFlipps[cardId];\n        this.setState({\n          isFlipped: newFlipps\n        });\n        setTimeout(() => {\n          this.next();\n        }, 1000);\n      }\n\n      ;\n\n      if (cardId === this.state.correctCard) {\n        if (choiceArray[arrayCount] === false) {\n          choiceArray[arrayCount] = !choiceArray[arrayCount];\n          this.setState({\n            correctChoice: true,\n            choiceArray: choiceArray\n          });\n        }\n\n        ;\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        cardArray: App.cardArray().sort(),\n        correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n        correctChoice: false,\n        choiceArray: Array(24).fill(false),\n        arrayCount: 0,\n        prePickMode: false\n      });\n    };\n\n    this.skip = () => {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        cardArray: App.cardArray().sort(),\n        correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n        correctChoice: false\n      });\n    };\n\n    this.next = () => {\n      const arrayCount = this.state.arrayCount;\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        cardArray: App.cardArray().sort(),\n        correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n        correctChoice: false,\n        arrayCount: arrayCount + 1\n      });\n    };\n\n    this.prePickMode = () => {\n      this.setState({\n        correctCard: null,\n        prePickMode: true\n      });\n    };\n\n    this.isGameOver = () => {\n      return this.state.arrayCount === 23;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      restartGame: this.restartGame,\n      prePickMode: this.prePickMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 8\n      }\n    }), this.isGameOver() ? /*#__PURE__*/React.createElement(GameOver, {\n      restartGame: this.restartGame,\n      choiceArray: this.state.choiceArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 8\n      }\n    }, this.state.cardArray.map((correctCard, index) => /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      id: index,\n      correctCard: this.state.correctCard,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"skip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.skip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, \"Skip\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, this.state.arrayCount + 1, \" of 24\")));\n  }\n\n}\n\nApp.cardArray = () => {\n  return [1, 2].reduce((preValue, current, index) => {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gwl/Workspace/SquareGuessGame/src/App.js"],"names":["React","PureComponent","Header","Card","GameOver","App","state","isFlipped","Array","fill","cardArray","sort","correctCard","Math","floor","random","correctChoice","choiceArray","arrayCount","prePickMode","handleClick","event","setTimeout","setState","preventDefault","cardId","parseInt","target","id","newFlipps","slice","next","restartGame","skip","isGameOver","render","map","index","reduce","preValue","current","concat"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false,\n    choiceArray: Array(24).fill(false),\n    arrayCount: 0,\n    prePickMode: false\n  };\n\n  static cardArray = () => {\n    return [1,2].reduce((preValue, current, index) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    if (this.state.prePickMode === true) {\n      setTimeout(() => {\n        this.setState({\n          correctCard: Math.floor(Math.random() * (3 - 0) + 0)\n        })\n      }, 200);\n    }\n      event.preventDefault();\n      const cardId = parseInt(event.target.id); \n      const newFlipps = this.state.isFlipped.slice();\n      const choiceArray = this.state.choiceArray.slice();\n      const arrayCount = this.state.arrayCount;\n      if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState({ \n        isFlipped: newFlipps,\n      })\n      setTimeout(() => {\n      this.next()\n      }, 1000)\n    };\n\n      if (cardId === this.state.correctCard) {\n        if (choiceArray[arrayCount] === false) {\n        choiceArray[arrayCount] = !choiceArray[arrayCount];\n        this.setState({ \n          correctChoice: true,\n          choiceArray: choiceArray\n        })};\n\n    }\n\n  };\n\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false,\n    choiceArray: Array(24).fill(false),\n    arrayCount: 0,\n    prePickMode: false\n    });\n  };\n\n  skip = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false\n    })\n  }\n\n  next = () => {\n    const arrayCount = this.state.arrayCount;\n    this.setState({\n      isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false,\n    arrayCount: arrayCount + 1\n    })\n\n    \n  }\n\n  prePickMode = () => {\n    this.setState({\n      correctCard: null,\n      prePickMode: true\n    })\n  }\n\n  isGameOver = () => {\n    return this.state.arrayCount === 23};\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame}\n               prePickMode={this.prePickMode} />\n       { this.isGameOver() ? \n              <GameOver \n                restartGame={this.restartGame} \n                choiceArray={this.state.choiceArray}\n              /> :\n       <div className=\"grid-container\">\n          {\n            this.state.cardArray.map((correctCard, index) => \n              <Card\n                key={index} \n                id={index} \n                correctCard={this.state.correctCard} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n          <div className=\"skip\">\n            <button onClick={this.skip}>\n            Skip\n            </button>\n          </div>\n          <div>\n            {this.state.arrayCount + 1} of 24\n          </div>\n        </div>\n       }\n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}