{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Workspace/SquareGuessGame/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray().sort(),\n      correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n      correctChoice: false\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      const cardId = parseInt(event.target.id);\n      const newFlipps = this.state.isFlipped.slice();\n\n      if (newFlipps[cardId] === false) {\n        newFlipps[cardId] = !newFlipps[cardId];\n        this.setState({\n          isFlipped: newFlipps\n        });\n      }\n\n      ;\n\n      if (cardId === this.state.correctCard) {\n        this.setState({\n          correctChoice: true\n        });\n      }\n\n      console.log(this.state);\n    };\n\n    this.isCardCorrect = () => {\n      if (this.state.correctChoice === true) {\n        const displayCorrect = this.state.shuffledCard.slice();\n      } else {\n        const displayWrong = this.state.correctCard.slice();\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        cardArray: App.cardArray().sort(),\n        correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n        correctChoice: false\n      });\n    };\n\n    this.skip = () => {\n      this.setState();\n    };\n\n    this.isGameOver = () => {\n      return this.state.isFlipped.every((element, index, array) => element !== false);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 8\n      }\n    }, this.state.cardArray.map((correctCard, index) => /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      id: index,\n      correctCard: this.state.correctCard,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, \"Skip\"))));\n  }\n\n}\n\nApp.cardArray = () => {\n  return [1, 2].reduce((preValue, current, index) => {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gwl/Workspace/SquareGuessGame/src/App.js"],"names":["React","PureComponent","Header","Card","GameOver","App","state","isFlipped","Array","fill","cardArray","sort","correctCard","Math","floor","random","correctChoice","handleClick","event","preventDefault","cardId","parseInt","target","id","newFlipps","slice","setState","console","log","isCardCorrect","displayCorrect","shuffledCard","displayWrong","restartGame","skip","isGameOver","every","element","index","array","render","map","reduce","preValue","current","concat"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false\n  };\n\n  static cardArray = () => {\n    return [1,2].reduce((preValue, current, index) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = parseInt(event.target.id); \n    const newFlipps = this.state.isFlipped.slice();\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState({ \n        isFlipped: newFlipps,\n      })};\n\n    if (cardId === this.state.correctCard) {\n       this.setState({ correctChoice: true})\n\n    }\n    console.log(this.state)\n\n  };\n\n  isCardCorrect = () => {\n    if (this.state.correctChoice === true) {\n      const displayCorrect = this.state.shuffledCard.slice();\n      \n    } else {\n      const displayWrong = this.state.correctCard.slice();\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (3 - 0) + 0),\n    correctChoice: false\n    });\n  };\n\n  skip = () => {\n    this.setState()\n  }\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame} />\n       <div className=\"grid-container\">\n          {\n            this.state.cardArray.map((correctCard, index) => \n              <Card\n                key={index} \n                id={index} \n                correctCard={this.state.correctCard} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n            \n          }\n          <div>\n            <button onClick={this.restartGame}>\n            Skip\n            </button>\n          </div>\n        </div>\n       \n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}