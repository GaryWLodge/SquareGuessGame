{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Workspace/square-guess-game/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(4).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random())\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      const cardId = event.target.id;\n      const newFlipps = this.state.isFlipped.slice();\n      this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n      });\n\n      if (newFlipps[cardId] === false) {\n        newFlipps[cardId] = !newFlipps[cardId];\n        this.setState(prevState => ({\n          isFlipped: newFlipps,\n          clickCount: this.state.clickCount + 1\n        }));\n\n        if (this.state.clickCount === 2) {\n          this.setState({\n            clickCount: 1\n          });\n          const prevCardId = this.state.prevCardId;\n          const newCard = this.state.shuffledCard[cardId];\n          const previousCard = this.state.prevSelectedCard;\n          this.isCardCorrect(previousCard, newCard, prevCardId, cardId);\n        }\n      }\n    };\n\n    this.isCardMatch = (card1, card2, card1Id, card2Id) => {\n      if (card1 === card2) {\n        const hideCard = this.state.shuffledCard.slice();\n        hideCard[card1Id] = -1;\n        hideCard[card2Id] = -1;\n        setTimeout(() => {\n          this.setState(prevState => ({\n            shuffledCard: hideCard\n          }));\n        }, 1000);\n      } else {\n        const flipBack = this.state.isFlipped.slice();\n        flipBack[card1Id] = false;\n        flipBack[card2Id] = false;\n        setTimeout(() => {\n          this.setState(prevState => ({\n            isFlipped: flipBack\n          }));\n        }, 1000);\n      }\n    };\n\n    this.isCardCorrect = (cardSelected, correctCard) => {\n      if (cardSelected === correctCard) {\n        const displayCorrect = this.state.shuffledCard.slice();\n        setTimeout(() => {\n          this.setState(prevState => ({\n            shuffledCard: hideCard\n          }));\n        }, 1000);\n      } else {\n        const displayWrong = this.state.isFlipped.slice();\n        setTimeout(() => {\n          this.setState(prevState => ({\n            isFlipped: flipBack\n          }));\n        }, 1000);\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n        clickCount: 1,\n        prevSelectedCard: -1,\n        prevCardId: -1\n      });\n    };\n\n    this.isGameOver = () => {\n      return this.state.isFlipped.every((element, index, array) => element !== false);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 8\n      }\n    }), this.isGameOver() ? /*#__PURE__*/React.createElement(GameOver, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 8\n      }\n    }, this.state.shuffledCard.map((cardNumber, index) => /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      id: index,\n      cardNumber: cardNumber,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nApp.duplicateCard = () => {\n  return [0, 1].reduce((preValue, current, index, array) => {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gwl/Workspace/square-guess-game/src/App.js"],"names":["React","PureComponent","Header","Card","GameOver","App","state","isFlipped","Array","fill","shuffledCard","duplicateCard","sort","Math","random","handleClick","event","preventDefault","cardId","target","id","newFlipps","slice","setState","prevSelectedCard","prevCardId","prevState","clickCount","newCard","previousCard","isCardCorrect","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","cardSelected","correctCard","displayCorrect","displayWrong","restartGame","isGameOver","every","element","index","array","render","map","cardNumber","reduce","preValue","current","concat"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(4).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random()),\n  };\n\n  static duplicateCard = () => {\n    return [0,1].reduce((preValue, current, index, array) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n    });\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({ \n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardCorrect(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }))\n      }, 1000);\n    } else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  isCardCorrect = (cardSelected, correctCard) => {\n    if (cardSelected === correctCard) {\n      const displayCorrect = this.state.shuffledCard.slice();\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }))\n      }, 1000);\n    } else {\n      const displayWrong = this.state.isFlipped.slice();\n\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame} />\n       { this.isGameOver() ? <GameOver restartGame={this.restartGame} /> :\n       <div className=\"grid-container\">\n          {\n            this.state.shuffledCard.map((cardNumber, index) => \n              <Card\n                key={index} \n                id={index} \n                cardNumber={cardNumber} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n        </div>\n       }\n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}