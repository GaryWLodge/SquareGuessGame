{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Workspace/SquareGuessGame/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(4).fill(false),\n      correctCard: Math.floor(Math.random() * 4 + 1),\n      correctChoice: false\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      const cardId = event.target.id;\n      const selectedCard = this.state.isFlipped.slice();\n\n      if (selectedCard[cardId] === this.state.correctCard) {\n        this.setState.correctChoice = true;\n\n        if (this.state.clickCount === 2) {\n          this.setState({\n            clickCount: 1\n          });\n          const prevCardId = this.state.prevCardId;\n          const newCard = this.state.shuffledCard[cardId];\n          const previousCard = this.state.prevSelectedCard;\n          this.isCardCorrect(previousCard, newCard, prevCardId, cardId);\n          console.log(this.state);\n        }\n      }\n    };\n\n    this.isCardCorrect = (cardSelected, correctCard) => {\n      if (cardSelected === correctCard) {\n        const displayCorrect = this.state.shuffledCard.slice();\n        setTimeout(() => {\n          this.setState(prevState => ({\n            shuffledCard: hideCard\n          }));\n        }, 1000);\n      } else {\n        const displayWrong = this.state.isFlipped.slice();\n        setTimeout(() => {\n          this.setState(prevState => ({\n            isFlipped: flipBack\n          }));\n        }, 1000);\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n        shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n        clickCount: 1,\n        prevSelectedCard: -1,\n        prevCardId: -1\n      });\n    };\n\n    this.isGameOver = () => {\n      return this.state.isFlipped.every((element, index, array) => element !== false);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }\n    }), this.isGameOver() ? /*#__PURE__*/React.createElement(GameOver, {\n      restartGame: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 30\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 8\n      }\n    }, this.state.shuffledCard.map((cardNumber, index) => /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      id: index,\n      cardNumber: cardNumber,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/gwl/Workspace/SquareGuessGame/src/App.js"],"names":["React","PureComponent","Header","Card","GameOver","App","state","isFlipped","Array","fill","correctCard","Math","floor","random","correctChoice","handleClick","event","preventDefault","cardId","target","id","selectedCard","slice","setState","clickCount","prevCardId","newCard","shuffledCard","previousCard","prevSelectedCard","isCardCorrect","console","log","cardSelected","displayCorrect","setTimeout","prevState","hideCard","displayWrong","flipBack","restartGame","duplicateCard","sort","isGameOver","every","element","index","array","render","map","cardNumber"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(4).fill(false),\n    correctCard: Math.floor(Math.random() * 4 + 1),\n    correctChoice: false\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const selectedCard = this.state.isFlipped.slice();\n\n    if (selectedCard[cardId] === this.state.correctCard) {\n       this.setState.correctChoice = true\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardCorrect(previousCard, newCard, prevCardId, cardId);\n        console.log(this.state)\n      }\n    }\n  };\n\n  // isCardMatch = (card1, card2, card1Id, card2Id) => {\n  //   if (card1 === card2) {\n  //     const hideCard = this.state.shuffledCard.slice();\n  //     hideCard[card1Id] = -1;\n  //     hideCard[card2Id] = -1;\n  //     setTimeout(() => {\n  //       this.setState(prevState => ({\n  //         shuffledCard: hideCard\n  //       }))\n  //     }, 1000);\n  //   } else {\n  //     const flipBack = this.state.isFlipped.slice();\n  //     flipBack[card1Id] = false;\n  //     flipBack[card2Id] = false;\n  //     setTimeout(() => {\n  //       this.setState(prevState => ({ isFlipped: flipBack }));\n  //     }, 1000);\n  //   }\n  // };\n\n  isCardCorrect = (cardSelected, correctCard) => {\n    if (cardSelected === correctCard) {\n      const displayCorrect = this.state.shuffledCard.slice();\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }))\n      }, 1000);\n    } else {\n      const displayWrong = this.state.isFlipped.slice();\n\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame} />\n       { this.isGameOver() ? <GameOver restartGame={this.restartGame} /> :\n       <div className=\"grid-container\">\n          {\n            this.state.shuffledCard.map((cardNumber, index) => \n              <Card\n                key={index} \n                id={index} \n                cardNumber={cardNumber} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n        </div>\n       }\n     </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}