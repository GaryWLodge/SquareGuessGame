{"version":3,"sources":["components/header/Header.jsx","components/card/Card.jsx","components/card/GameOver.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","restartGame","prePickMode","prePickTrue","className","onClick","Card","id","isFlipped","handleClick","correctCard","flipSpeedBackToFront","flipSpeedFrontToBack","key","GameOver","correctCount","wrongCount","App","state","Array","fill","cardArray","sort","Math","floor","random","correctChoice","choiceArray","arrayCount","event","setTimeout","setState","preventDefault","cardId","parseInt","target","newFlipps","slice","next","skip","isGameOver","this","filter","count","length","map","index","skip-wrapper","PureComponent","reduce","preValue","current","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2932201f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ restartGame, prePickMode, prePickTrue }) => (\n  <div className=\"grid-header-container\">\n    <div className=\"justify-left timer\"></div>\n    <div className=\"justify-center game-status-text\"></div>\n    <div className=\"justify-end\">\n      <button onClick={restartGame} className=\"restart-button\">Restart Game</button>\n    </div>\n    <div className=\"justify-front\">\n      <button onClick={prePickMode} className={`${prePickTrue === true ? \"pre-pick\" : \"restart-button\"}`}\n      >Pre-Pick-Mode</button>\n    </div>\n  </div>\n);\n\nexport default Header;","import React from 'react';\nimport ReactCardFlip from \"react-card-flip\";\n\nconst Card = ({ id, isFlipped, handleClick, correctCard }) => (\n  <ReactCardFlip isFlipped={isFlipped} flipSpeedBackToFront={0} flipSpeedFrontToBack={1}>\n    <button id={id} className={`card card-front `} \n    onClick={handleClick} key=\"front\">\n      {id + 1}\n    </button>\n\n    <button id={id} className={`card card-back ${correctCard === id ? \"correct-card\" : \"wrong-card\"}`} \n    onClick={handleClick} key=\"back\">\n      { correctCard + 1}\n    </button>\n  </ReactCardFlip>\n);\n\nexport default Card;","import React from 'react';\n\nconst GameOver = ({ restartGame , correctCount, wrongCount}) => (\n  <div className=\"justify-center\">\n    <h1>Game Over!</h1>\n<h2>You got {correctCount} Right :)</h2>\n<h2>You got {wrongCount} Wrong :(</h2>\n\n    <h3>Click Restart Game to play Again!!!</h3>\n    <button className=\"restart-button\" onClick={restartGame}>Restart Game</button>\n  </div>\n);\n\nexport default GameOver;","import React, { PureComponent } from 'react';\nimport Header from './components/header/Header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (4 - 0) + 0),\n    correctChoice: false,\n    choiceArray: Array(24).fill(false),\n    arrayCount: 0,\n    prePickMode: false\n  };\n\n  static cardArray = () => {\n    return [1,2].reduce((preValue, current, index) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    if (this.state.prePickMode === true) {\n      setTimeout(() => {\n        this.setState({\n          correctCard: Math.floor(Math.random() * (4 - 0) + 0)\n        })\n      }, 200);\n    }\n      event.preventDefault();\n      const cardId = parseInt(event.target.id); \n      const newFlipps = this.state.isFlipped.slice();\n      const choiceArray = this.state.choiceArray.slice();\n      const arrayCount = this.state.arrayCount;\n      if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState({ \n        isFlipped: newFlipps,\n      })\n      setTimeout(() => {\n      this.next()\n      }, 1000)\n    };\n      \n    setTimeout(() => {\n      if (cardId === this.state.correctCard) {\n        if (choiceArray[arrayCount] === false) {\n        choiceArray[arrayCount] = !choiceArray[arrayCount];\n        this.setState({ \n          correctChoice: true,\n          choiceArray: choiceArray\n        })};\n      }\n    }, 200)\n  };\n\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(4).fill(false),\n    cardArray: App.cardArray().sort(),\n    correctCard: Math.floor(Math.random() * (4 - 0) + 0),\n    correctChoice: false,\n    choiceArray: Array(24).fill(false),\n    arrayCount: 0,\n    prePickMode: false\n    });\n  };\n\n  skip = () => {\n    \n    if (this.state.prePickMode === true) {\n      const arrayCount = this.state.arrayCount;\n      this.setState({\n        isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray().sort(),\n      correctCard: null,\n      correctChoice: false,\n      })\n    }else {\n      this.setState({\n        isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray().sort(),\n      correctCard: Math.floor(Math.random() * (4 - 0) + 0),\n      correctChoice: false\n      })\n    }\n  }\n\n  next = () => {\n    \n    if (this.state.prePickMode === true) {\n      const arrayCount = this.state.arrayCount;\n      this.setState({\n        isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray().sort(),\n      correctCard: null,\n      correctChoice: false,\n      arrayCount: arrayCount + 1\n      })\n    }else {\n      const arrayCount = this.state.arrayCount;\n      this.setState({\n        isFlipped: Array(4).fill(false),\n      cardArray: App.cardArray().sort(),\n      correctCard: Math.floor(Math.random() * (4 - 0) + 0),\n      correctChoice: false,\n      arrayCount: arrayCount + 1\n      })\n    }\n  }\n\n  prePickMode = () => {\n    this.setState({\n      correctCard: null,\n      prePickMode: true\n    })\n  }\n\n  isGameOver = () => {\n    return this.state.arrayCount === 23};\n\n  render() {\n    const correctCount = this.state.choiceArray.filter(count => count === true).length;\n    const wrongCount = this.state.choiceArray.filter(count => count === false).length;\n    return (\n     <div>\n       <Header restartGame={this.restartGame}\n               prePickMode={this.prePickMode}\n               prePickTrue={this.state.prePickMode} />\n       { this.isGameOver() ? \n              <GameOver \n                restartGame={this.restartGame} \n                correctCount={correctCount}\n                wrongCount={wrongCount}\n              /> :\n       <div className=\"grid-container\">\n          {\n            this.state.cardArray.map((correctCard, index) => \n              <Card\n                key={index} \n                id={index} \n                correctCard={this.state.correctCard} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n        </div>\n       }\n        <div skip-wrapper>\n            <button className=\"skip grid-container\" onClick={this.skip}>\n            Skip\n            </button>\n        </div>\n       <div>\n            {this.state.arrayCount + 1} of 24\n      </div>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}